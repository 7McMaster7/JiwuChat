---
globs: *.vue,*.ts,*.js,nuxt.config.ts
description: Nuxt.js开发规范和最佳实践
---

# Nuxt.js 开发规范

基于 [nuxt.config.ts](mdc:nuxt.config.ts) 的Nuxt.js开发指南。

## 项目配置

### 核心设置

- **SSR模式**: 禁用 (`ssr: false`) - 纯SPA应用
- **TypeScript**: 启用类型检查 (`typeCheck: true`)
- **兼容性**: 2024-08-14
- **Node版本**: >=20.0.0
- **包管理器**: pnpm >=10.0.0

### 模块配置

```typescript
modules: [
  '@vueuse/nuxt', // Vue工具库
  '@nuxtjs/color-mode', // 深色模式
  '@element-plus/nuxt', // UI组件库
  '@formkit/auto-animate/nuxt', // 动画
  '@unocss/nuxt', // 原子化CSS
  '@pinia/nuxt', // 状态管理
  'pinia-plugin-persistedstate/nuxt', // 状态持久化
  '@nuxt/eslint' // 代码检查
]
```

## 开发规范

### 1. 目录结构

- `app/` - 源码目录 (通过 `srcDir` 配置)
- `app/components/` - 组件目录
- `app/pages/` - 页面路由
- `app/composables/` - 组合式函数
- `app/layouts/` - 布局组件
- `app/assets/` - 静态资源

### 2. 自动导入

```typescript
imports: {
  dirs: [
    "composables/**",  // 自动导入组合式函数
    "types/**",        // 自动导入类型定义
  ],
}
```

### 3. 路由规则

- `/` - 预渲染
- `/login` - 预渲染
- 其他路由使用SPA模式

### 4. 构建优化

- **代码分割**: 手动配置chunk分割策略
- **Tauri插件**: 统一打包为 `tauri-plugins`
- **图形库**: `ogl` 单独打包为 `graphics`
- **第三方库**: 统一打包为 `vendor`

### 5. 样式处理

```scss
// SCSS全局变量注入
@use '@/assets/styles/element/index.scss' as element;
@use '@/assets/styles/element/dark.scss' as dark;
@use '@/assets/styles/var.scss' as *;
```

## 开发命令

### 开发环境

```bash
pnpm dev:nuxt        # Web端开发
pnpm dev:tauri       # 桌面端开发
pnpm dev:android     # Android开发
pnpm dev:ios         # iOS开发
```

### 生产构建

```bash
pnpm build           # 完整构建 (Nuxt + Tauri)
pnpm build:nuxt      # 仅构建Web端
pnpm build:tauri     # 仅构建桌面端
pnpm build:android   # 构建Android APK
pnpm build:ios       # 构建iOS IPA
```

## 环境配置

### 环境变量

- `VITE_API_BASE_URL` - API基础URL
- `NUXT_PUBLIC_SPA` - SPA模式标识
- `NUXT_PUBLIC_NODE_ENV` - 环境模式
- `TAURI_PLATFORM` - 平台标识

### 运行时配置

```typescript
runtimeConfig: {
  public: {
    baseUrl: BASE_URL,
    mode,
    version,
    isMobile,
  },
}
```

## 最佳实践

1. **组件开发**: 使用Vue 3 Composition API
2. **状态管理**: 使用Pinia进行状态管理
3. **类型安全**: 充分利用TypeScript类型检查
4. **性能优化**: 合理使用代码分割和懒加载
5. **跨平台**: 考虑桌面端和移动端的差异
6. **深色模式**: 使用 `@nuxtjs/color-mode` 支持主题切换

## 注意事项

- 项目使用SPA模式，注意SEO和首屏加载优化
- Tauri开发需要特定的环境配置
- 移动端开发需要相应的平台工具链
- 代码检查使用ESLint，提交前会自动修复
